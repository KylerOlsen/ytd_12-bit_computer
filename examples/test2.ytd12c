// Kyler Olsen
// Source Code Test 2
// Syntax Test
# Dummy Directive

struct Point {
    static points: @Point = 0,
    static count: int = 0,
    x: int = 0,
    y: int = 0,
    z: int,
    random: @int
}

enum Colors { RED, GREEN, BLUE = 5 , PINK, VIOLET = 3, PURPLE = 3, INDIGO, GREY }

fn test_func(arg1: int, arg2: unsigned = 10) -> fixed {
    let var1: float;
    var1 = (arg1 + arg2) / arg1;
    var1 = var1 + test_func(arg2, arg1) + 15;
    test_func = var1;
}

fn test_func2() -> Point {
    let test: float;
    Point.points;
    test++;
    test--;
    --test;
    ++test;
    -test;
    !test;
    $test;
    ~test;
    @test;

    test >> test;
    test << test;
    test ^ test;
    test | test;
    test & test;
    test % test;
    test / test;
    test * test;
    test - test;
    test + test;
    test >= test;
    test > test;
    test <= test;
    test < test;
    test != test;
    test == test;
    test ^^ test;
    test || test;
    test && test;
    test >>= test;
    test <<= test;
    test ^= test;
    test |= test;
    test &= test;
    test %= test;
    test /= test;
    test *= test;
    test -= test;
    test += test;
    test = test;

    test ? test : test;

    test = None;
    test = False;
    test = True;
    test = 1234;
    test = 0xff1;
    test = .156;
    test = 15e5;
    test = 0o1526;
    test = 0b1010;
    test = '5';
    test = 'g';
    test = '\n';
    test = '\'';
    test = '\\';
    test = '"';
    test = "Hello World!";
    test = "This is \"cool\"!";

    break;
    continue;

    if (test >= 10);

    if (test >= 20)
        test -= 2;
    test -= 3;

    if (test >= 20)
        test -= 2;
    else
        test -= 3;

    if (test >= 30) {
        test -= 4;
        test -= 5;
    }

    if (test >= 40) {
        test -= 6;
    } else {
        test += 15;
    }

    if (test >= 50) {
        test -= 7;
    } else if (test >= 60) {
        test--;
    } else {
        test += 16;
    }

    do
        test += 17;
    while (test);

    do
        test += 18;
    while (test)
        test += 19;

    do
        test += 20;
    while (test)
    else
        test += 21;

    do
        test += 22;
    while (test)
        test += 23;
    else
        test += 24;

    do
        test += 25;
    while (test)
        test += 26;
    else if (test == 32)
        test += 27;

    do {
        test += 18;
    } while (test);

    do {
        test += 29;
    } while (test) {
        test += 30;
    }

    do {
        test += 31;
    } while (test)
    else {
        test += 32;
    }

    do {
        test += 33;
    } while (test) {
        test += 34;
    } else {
        test += 35;
    }

    while (test >= 20)
        test -= 2;
    test -= 3;

    while (test >= 20)
        test -= 2;
    else
        test -= 3;

    while (test >= 30) {
        test -= 4;
        test -= 5;
    }

    while (test >= 40) {
        test -= 6;
    } else {
        test += 15;
    }

    let length: int = 10;

	for (i: int = 0; i < length; i++)
		$(inData + i) ^= $(pass + ((i + offset) % pLength));

	for (i: int = 0; i < length; i++)
		$(inData + i) ^= $(pass + ((i + offset) % pLength));
    else
        test = 16;

	for (i: int; i < length; i++) {
		$(inData + i) ^= $(pass + ((i + offset) % pLength));
	}

    let i: int;

	for (i = 0; i < length; i++) {
		$(inData + i) ^= $(pass + ((i + offset) % pLength));
	} else {
        test = 17;
    }
}

fn main() -> int {
    let var1: int = 1;
    let var2: unsigned = 1;
    main = 0;
    test_func(arg1=var1, arg2=var2);
    test_func2();
}
