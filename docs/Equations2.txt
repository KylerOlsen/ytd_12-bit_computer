Halt = (A & ~B & ~C & ~D & ~E & ~F & ~G & ~H & ~I & ~J & ~K & ~L)

Interrupt = (~A & B & ~C & ~D & ~E & ~F & ~G & ~H & ~I & ~J & ~K & ~L)

Branch if Zero = (A & B & ~C & ~D & ~E & ~F & ~G & ~H & ~I & ~J & ~K & ~L)

Block interrupts = (~A & ~B & C & ~D & ~E & ~F & ~G & ~H & ~I & ~J & ~K & ~L)

Unblock interrupts = (A & ~B & C & ~D & ~E & ~F & ~G & ~H & ~I & ~J & ~K & ~L)

Read Last Address = (~D & E & ~F & ~G & ~H & ~I & ~J & ~K & ~L)

Read Interrupt Device = (D & E & ~F & ~G & ~H & ~I & ~J & ~K & ~L)

Read Memory = (~D & ~E & F & ~G & ~H & ~I & ~J & ~K & ~L) | (D & E & F & ~G & ~H & ~I & ~J & ~K & ~L)

Write Memory = (D & ~E & F & ~G & ~H & ~I & ~J & ~K & ~L) | (~D & E & F & ~G & ~H & ~I & ~J & ~K & ~L)

Use Memory Pointer = (~D & ~E & F & ~G & ~H & ~I & ~J & ~K & ~L) | (D & ~E & F & ~G & ~H & ~I & ~J & ~K & ~L)

Use Stack Pointer = (~D & E & F & ~G & ~H & ~I & ~J & ~K & ~L) | (D & E & F & ~G & ~H & ~I & ~J & ~K & ~L)

Load Immediate = (H & ~I & ~J & ~K & ~L)

Write Reg 1 = (~D & E & ~F & ~G & ~H & ~I & ~J & ~K & ~L) | (D & E & ~F & ~G & ~H & ~I & ~J & ~K & ~L) | (~D & ~E & F & ~G & ~H & ~I & ~J & ~K & ~L) | (~D & E & F & ~G & ~H & ~I & ~J & ~K & ~L) | (~G & ~H & I & ~J & ~K & ~L) | (G & ~H & I & ~J & ~K & ~L) | (~G & H & I & ~J & ~K & ~L) | (G & H & I & ~J & ~K & ~L) | (J & ~K & ~L) | (~J & K & ~L) | (J & K & ~L) | (~J & ~K & L) | (J & ~K & L) | (~J & K & L) | (J & K & L)

Read Reg 1 = (D & ~E & F & ~G & ~H & ~I & ~J & ~K & ~L) | (D & E & F & ~G & ~H & ~I & ~J & ~K & ~L)

Read Reg 2 = (~G & ~H & I & ~J & ~K & ~L) | (G & ~H & I & ~J & ~K & ~L) | (~G & H & I & ~J & ~K & ~L) | (G & H & I & ~J & ~K & ~L) | (J & ~K & ~L) | (~J & K & ~L) | (J & K & ~L) | (~J & ~K & L) | (J & ~K & L) | (~J & K & L) | (J & K & L)

Read Reg 3 = (J & ~K & ~L) | (~J & K & ~L) | (J & K & ~L) | (~J & ~K & L) | (J & ~K & L) | (~J & K & L) | (J & K & L)

Left Shift = (~G & ~H & I & ~J & ~K & ~L)

Right Shift = (G & ~H & I & ~J & ~K & ~L)

AND = (J & ~K & ~L) | (J & K & ~L)

OR = (~J & K & ~L) | (~J & K & L)

XOR = (J & ~K & L)

NOT out = (J & K & ~L) | (~J & K & L)

NOT Reg 3 = (G & H & I & ~J & ~K & ~L) | (~J & ~K & L)

Add = (~G & H & I & ~J & ~K & ~L) | (G & H & I & ~J & ~K & ~L) | (~J & ~K & L) | (J & K & L)

Inject Carry = (~G & H & I & ~J & ~K & ~L) | (G & H & I & ~J & ~K & ~L) | (~J & ~K & L)

One as Reg 3 = (G & H & I & ~J & ~K & ~L)
